package com.lily.teacupx.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STAR_BEAN_INFO".
*/
public class StarBeanInfoDao extends AbstractDao<StarBeanInfo, Long> {

    public static final String TABLENAME = "STAR_BEAN_INFO";

    /**
     * Properties of entity StarBeanInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property Blood = new Property(3, int.class, "blood", false, "BLOOD");
        public final static Property Stature = new Property(4, int.class, "stature", false, "STATURE");
        public final static Property Age = new Property(5, int.class, "age", false, "AGE");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property DetailsDesc = new Property(8, String.class, "detailsDesc", false, "DETAILS_DESC");
        public final static Property Cover = new Property(9, String.class, "cover", false, "COVER");
        public final static Property Image_one = new Property(10, String.class, "image_one", false, "IMAGE_ONE");
        public final static Property Image_two = new Property(11, String.class, "image_two", false, "IMAGE_TWO");
        public final static Property Image_three = new Property(12, String.class, "image_three", false, "IMAGE_THREE");
        public final static Property Image_four = new Property(13, String.class, "image_four", false, "IMAGE_FOUR");
    }


    public StarBeanInfoDao(DaoConfig config) {
        super(config);
    }
    
    public StarBeanInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STAR_BEAN_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"BLOOD\" INTEGER NOT NULL ," + // 3: blood
                "\"STATURE\" INTEGER NOT NULL ," + // 4: stature
                "\"AGE\" INTEGER NOT NULL ," + // 5: age
                "\"ADDRESS\" TEXT," + // 6: address
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"DETAILS_DESC\" TEXT," + // 8: detailsDesc
                "\"COVER\" TEXT," + // 9: cover
                "\"IMAGE_ONE\" TEXT," + // 10: image_one
                "\"IMAGE_TWO\" TEXT," + // 11: image_two
                "\"IMAGE_THREE\" TEXT," + // 12: image_three
                "\"IMAGE_FOUR\" TEXT);"); // 13: image_four
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STAR_BEAN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StarBeanInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
        stmt.bindLong(4, entity.getBlood());
        stmt.bindLong(5, entity.getStature());
        stmt.bindLong(6, entity.getAge());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String detailsDesc = entity.getDetailsDesc();
        if (detailsDesc != null) {
            stmt.bindString(9, detailsDesc);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(10, cover);
        }
 
        String image_one = entity.getImage_one();
        if (image_one != null) {
            stmt.bindString(11, image_one);
        }
 
        String image_two = entity.getImage_two();
        if (image_two != null) {
            stmt.bindString(12, image_two);
        }
 
        String image_three = entity.getImage_three();
        if (image_three != null) {
            stmt.bindString(13, image_three);
        }
 
        String image_four = entity.getImage_four();
        if (image_four != null) {
            stmt.bindString(14, image_four);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StarBeanInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
        stmt.bindLong(4, entity.getBlood());
        stmt.bindLong(5, entity.getStature());
        stmt.bindLong(6, entity.getAge());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String detailsDesc = entity.getDetailsDesc();
        if (detailsDesc != null) {
            stmt.bindString(9, detailsDesc);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(10, cover);
        }
 
        String image_one = entity.getImage_one();
        if (image_one != null) {
            stmt.bindString(11, image_one);
        }
 
        String image_two = entity.getImage_two();
        if (image_two != null) {
            stmt.bindString(12, image_two);
        }
 
        String image_three = entity.getImage_three();
        if (image_three != null) {
            stmt.bindString(13, image_three);
        }
 
        String image_four = entity.getImage_four();
        if (image_four != null) {
            stmt.bindString(14, image_four);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StarBeanInfo readEntity(Cursor cursor, int offset) {
        StarBeanInfo entity = new StarBeanInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.getInt(offset + 3), // blood
            cursor.getInt(offset + 4), // stature
            cursor.getInt(offset + 5), // age
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // detailsDesc
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cover
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // image_one
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // image_two
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // image_three
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // image_four
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StarBeanInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBlood(cursor.getInt(offset + 3));
        entity.setStature(cursor.getInt(offset + 4));
        entity.setAge(cursor.getInt(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDetailsDesc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCover(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImage_one(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImage_two(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setImage_three(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setImage_four(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StarBeanInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StarBeanInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StarBeanInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
